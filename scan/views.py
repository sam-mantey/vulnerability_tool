from django.shortcuts import get_object_or_404, render
from django.http import HttpResponse, JsonResponse
from django.shortcuts import redirect, render
from zapv2 import ZAPv2
from .models import Scan, User
import time
from django.contrib.auth.decorators import login_required
import os 
from dotenv import load_dotenv
# Create your views here.

load_dotenv()
ZAP_API_KEY = os.getenv('ZAP_API_KEY') 

def RedirectToUserPage(request):
    username = request.user.username
    return redirect('scan:user_page', username=username)

@login_required
def UserPage(request, username):
    scans = Scan.objects.filter(created_by = request.user) 
    return render(request, 'scan/user_page.html', {
        'username': username,
        'scans': scans
    })

def ScanJson(request, username, pk):
    scan_detail = get_object_or_404(Scan, id=pk, created_by=request.user)
    return JsonResponse({
        'scan_result': scan_detail.scan_results
    })

@login_required
def ScanDetail(request, username, pk):
    scan_detail = get_object_or_404(Scan, id=pk, created_by=request.user)
    alert_number = len(scan_detail.scan_results)
    print(alert_number)
    return render(request, 'scan/report.html', {
        'scan_detail': scan_detail,
        'alert_number': alert_number
    })



@login_required
def NewScan(request, username):
    if request.method == 'POST':
        target_url = request.POST["url"]
        scan_type = request.POST["scan_type"]
        # save the target url and scan_type in the session 
        zap = ZAPv2(apikey=ZAP_API_KEY, proxies={'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})
        scanID = zap.spider.scan(target_url) #Starts the spider
        print(f'in the home view scanID : {scanID}')
        request.session['scanID'] = scanID
        request.session['scan_type'] = scan_type
        request.session['target_url'] = target_url

        
        return redirect('scan:scan_status', username=username)

    return render(request, 'scan/new_scan.html')

@login_required
def CheckStatus(request):
    zap = ZAPv2(apikey=ZAP_API_KEY, proxies={'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})
    scanID = request.session.get('scanID')
    target_url = request.session.get('target_url')
    scan_type = request.session.get('scan_type')
    spider_status = zap.spider.status(scanID)

    print(f'ScanID is {scanID}')
    print('this is spider status')
    print(spider_status)
    print(type(spider_status))
    print(scan_type)
    print(target_url)


    spider_completed = False
    scan_completed = False
    report_generated = False

    if int(spider_status) >= 100:
        spider_completed = True
    
    if scan_type == 'passive':
        if int(zap.pscan.records_to_scan) <= 0 :
            scan_completed = True

        if spider_completed and scan_completed:
            scan_alerts = zap.core.alerts()

            scan = Scan(
                url = target_url,
                scan_type = scan_type,
                spider_results = zap.spider.results(scanID),
                created_by = request.user,
                scan_results = scan_alerts
            )
            scan.save()
            
            report_generated = True

    elif scan_type == 'active':
        print(f'In active scanID: {scanID}')
        print(f'In active, {zap.ascan.status(scanID)}')
        ascanID = zap.ascan.scan(target_url)
        if int(zap.ascan.status(ascanID)) >= 100:
            scan_completed = True

        if spider_completed and scan_completed:
            scan_alerts = zap.core.alerts(baseurl = target_url)

            scan = Scan(
                url = target_url,
                scan_type = scan_type,
                spider_results = zap.spider.results(scanID),
                scan_results = scan_alerts
            )
            scan.save()


    return JsonResponse({
        'scan_type': scan_type,
        'spider_completed': spider_completed,
        'scan_completed': scan_completed,
        'report_generated': report_generated,
    })

@login_required
def ScanStatus(request, username):
      print('Scan _status running')
      return render(request, 'scan/scan_status.html')


